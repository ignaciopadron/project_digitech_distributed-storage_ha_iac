---
# k8s-secrets-setup.yml
# Playbook dedicado exclusivamente a crear Secret de Kubernetes
# Ejecuta desde localhost y requiere KUBECONFIG configurado
# Principio de Responsabilidad Única: Solo manejo de secretos K8s

- name: "Create Kubernetes Secrets from Ansible Vault"
  hosts: localhost
  connection: local
  gather_facts: no
  
  pre_tasks:
    - name: "Verificar que KUBECONFIG está disponible"
      k8s_info:
        api_version: v1
        kind: Namespace
        name: default
      register: kubeconfig_test
      failed_when: false
      
    - name: "Error: KUBECONFIG no configurado"
      fail:
        msg: |
          KUBECONFIG no está configurado o no es accesible.
          Asegúrate de que:
          1. El cluster K3s está funcionando
          2. KUBECONFIG apunta al archivo correcto
          3. Tienes permisos para acceder al cluster
      when: kubeconfig_test.failed is defined and kubeconfig_test.failed

    - name: "KUBECONFIG configurado correctamente"
      debug:
        msg: "Conexión al cluster Kubernetes exitosa"

  tasks:
    # ================================
    # NAMESPACE OCIS
    # ================================
    - name: "Crear namespace ocis"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: ocis
            labels:
              app.kubernetes.io/name: ocis
              app.kubernetes.io/managed-by: ansible

    - name: "Crear secret OCIS S3 credentials"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: ocis-s3-credentials
            namespace: ocis
            labels:
              app.kubernetes.io/name: ocis
              app.kubernetes.io/component: s3-credentials
              app.kubernetes.io/managed-by: ansible
          stringData:
            accessKey: "{{ seaweedfs_s3_access_key | default('ocisaccesskey') }}"
            secretKey: "{{ seaweedfs_s3_secret_key | default('ocissecretkey123!') }}"

    - name: "Crear secret OCIS admin user"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: ocis-admin-user-secret
            namespace: ocis
            labels:
              app.kubernetes.io/name: ocis
              app.kubernetes.io/component: admin-credentials
              app.kubernetes.io/managed-by: ansible
          stringData:
            user-id: "{{ ocis_admin_user | default('admin') }}"
            password: "{{ ocis_admin_password | default('admin') }}"

    # ================================
    # NAMESPACE MONITORING
    # ================================
    - name: "Crear namespace monitoring"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: monitoring
            labels:
              app.kubernetes.io/name: monitoring
              app.kubernetes.io/managed-by: ansible

    - name: "Crear secret Grafana admin"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: grafana-admin-secret
            namespace: monitoring
            labels:
              app.kubernetes.io/name: grafana
              app.kubernetes.io/component: admin-credentials
              app.kubernetes.io/managed-by: ansible
          stringData:
            admin-user: "{{ grafana_admin_user | default('admin') }}"
            admin-password: "{{ grafana_admin_password | default('admin123!') }}"

    # ================================
    # NAMESPACE SEAWEEDFS
    # ================================
    - name: "Crear namespace seaweedfs"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: seaweedfs
            labels:
              app.kubernetes.io/name: seaweedfs
              app.kubernetes.io/managed-by: ansible

    - name: "Crear secret SeaweedFS S3 admin"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: seaweedfs-s3-secret
            namespace: seaweedfs
            labels:
              app.kubernetes.io/name: seaweedfs
              app.kubernetes.io/component: s3-admin-credentials
              app.kubernetes.io/managed-by: ansible
          stringData:
            admin-access-key: "{{ seaweedfs_s3_admin_access_key | default('seaweedfs-admin') }}"
            admin-secret-key: "{{ seaweedfs_s3_admin_secret_key | default('seaweedfs-secret123!') }}"

    - name: "Crear secret SeaweedFS JWT signing key"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: seaweedfs-signing-key
            namespace: seaweedfs
            labels:
              app.kubernetes.io/name: seaweedfs
              app.kubernetes.io/component: jwt-signing-key
              app.kubernetes.io/managed-by: ansible
          stringData:
            signingKey: "{{ seaweedfs_jwt_signing_key | default('default-jwt-key-change-me') }}"

    # ================================
    # NAMESPACE KUBE-SYSTEM (Escalabilidad)
    # ================================
    - name: "Renderizar plantilla cloud-init para el autoscaler"
      set_fact:
        autoscaler_cloud_init_script: "{{ lookup('template', 'templates/cloud-init-autoscaler.j2') }}"

    - name: "Construir la estructura de configuración del autoscaler"
      set_fact:
        hcloud_cluster_config_data:
          imagesForArch:
            amd64: "ubuntu-24.04"
          nodeConfigs:
            k3s-workers: # Este nombre lo usará el deployment del autoscaler
              serverType: "{{ hcloud_worker_server_type | default('cx22') }}"
              location: "{{ hcloud_worker_location | default('fsn1') }}"
              sshKey: "{{ hcloud_ssh_key_name | default('mi-clave-ssh-personal') }}"
              cloudInit: "{{ autoscaler_cloud_init_script }}"
              labels:
                cluster-name: "k3s-workers"
      no_log: true # Ocultar la salida de esta estructura que puede ser grande

    - name: "Convertir configuración a JSON y codificar a Base64"
      set_fact:
        hcloud_cluster_config_b64: "{{ hcloud_cluster_config_data | to_nice_json | b64encode }}"
      no_log: true # Ocultar la salida de datos codificados

    - name: "🔐 Crear secret 'hcloud-cluster-config' para el autoscaler"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: hcloud-cluster-config
            namespace: kube-system
          type: Opaque
          data:
            config: "{{ hcloud_cluster_config_b64 }}"

    - name: "🔐 Crear secret 'hcloud' con el token de API"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: hcloud
            namespace: kube-system
          stringData:
            token: "{{ hcloud_token }}" # Desde Ansible Vault

    # ================================
    # NAMESPACE CERT-MANAGER
    # ================================
    - name: "Crear namespace cert-manager"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: cert-manager
            labels:
              app.kubernetes.io/name: cert-manager
              app.kubernetes.io/managed-by: ansible

    - name: "Crear secret Let's Encrypt account key"
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: le-account-key
            namespace: cert-manager
            labels:
              app.kubernetes.io/name: cert-manager
              app.kubernetes.io/component: letsencrypt-account
              app.kubernetes.io/managed-by: ansible
          type: Opaque
          data: {}  # Let's Encrypt creará automáticamente la clave privada

  post_tasks:
    - name: "✅ Resumen de secretos creados"
      debug:
        msg: |
          🎉 Secretos de Kubernetes creados exitosamente:
          
          📦 Namespace: ocis
          ├── ocis-s3-credentials (accessKey, secretKey)
          └── ocis-admin-user-secret (user-id, password)
          
          📦 Namespace: monitoring  
          └── grafana-admin-secret (admin-user, admin-password)
          
          📦 Namespace: seaweedfs
          ├── seaweedfs-s3-secret (admin-access-key, admin-secret-key)
          └── seaweedfs-signing-key (signingKey)
          
          📦 Namespace: kube-system (Escalabilidad)
          ├── hcloud-token (token)
          └── hcloud-cluster-config (config JSON)
          
          📦 Namespace: cert-manager
          └── le-account-key (clave privada ACME)
          
          🔄 Los charts de Helm pueden ahora consumir estos secretos
          mediante referencias en sus values.yaml 